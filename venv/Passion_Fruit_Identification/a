# get all feature values to featureArray
        with open("../Features/Original_images_features.csv") as feature:
            featureList = csv.reader(feature)
            for featureRow in featureList:
                featuresArray.insert(index,featureRow)
                index = index +1

        #print(featuresArray[0][257])

        # add label from label.csv
        for x in range(0, len(featuresArray)-1):
            imgName = '_'.join(featuresArray[count1][0].split('_', 2)[:2])
            print(imgName)
            with open("../Label/Label_file.csv") as label:
                labelList = csv.reader(label)
                for labelRow in labelList:
                    if labelRow[0] == imgName:
                        featuresArray[count1][257] = labelRow[1]
            count1 += 1

        # new labeled features save in the csv file
        try:
            with open("../Features/Original_images_features.csv", mode='w', newline='') as feature_file:
                feature_writer = csv.writer(feature_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)

                for i in featuresArray:
                    # print(i)
                    feature_writer.writerow(i)
            successMessage = 1
        except:
            successMessage = 0

            def RotateImages(self):
            delImagesName = []
            preImagesName = []
            newImagesName = []
            index = 0
            directory = '../Images/Rotate_image/'

            try:
                for root, dirs, files in os.walk("../Images/Rotate_image/"):
                    for filename in files:
                        # print(filename)
                        preImagesName.insert(index, filename)
                        img1 = cv2.imread("../Images/Rotate_image/" + preImagesName[index])
                        img2 = np.rot90(img1)
                        cv2.imwrite(os.path.join(directory, preImagesName[index]), img2)
                        print(str(preImagesName[index])+" was rotated")
                        index += 1

                    start_number = 1  # number will be changed according to start number
                    # start number is not started from 0
                    for x in range(0, len(preImagesName)):
                        before_name = 'img_'
                        ext = '.jpg'
                        newImagesName.insert(x, before_name + str(start_number) + ext)
                        start_number += 1

                    for x in range(0, len(preImagesName)):
                        os.rename(os.path.join(directory, preImagesName[x]), os.path.join(directory, newImagesName[x]))
                        print(str(newImagesName[x])+" was renamed")

                messagebox.showinfo("Success", "Successfully Rotated!")
            except:
                messagebox.showerror("Fail", "Error occured!")



# training set create
        xtrain=data[0:3343,1:]
        train_label = data[0:3343,257]

        clf.fit(xtrain,train_label)

        # testing data
        xtest = data[3343:,1:]
        actual_label = data[3343:,257]

        p = clf.predict(xtest)
        print(p)

        count = 0
        # for i in range(0,3343):
        #     if p[i] == actual_label[i]
        #         count += 1
        #     else:
        #         count = 0

        print("Accuracy= "+(count/3343)*100)


#data = pd.read_csv("../Features/Gray_features.csv")
        #print(type(data))
        #print(data)

        labelNewArray = []
        index = 0
        path = "../Features/Gray_features.csv"

        with open(path) as labels:
            labelList = csv.reader(labels)
            for labelRow in labelList:
                # featuresArray.insert(index, featureRow)
                labelNewArray.insert(index, labelRow)
                index = index + 1
        clf = SVC()

        xtrain = labelNewArray[0:3343, 1:256]
        train_label = labelNewArray[0:3343, 257]

        clf.fit(xtrain,train_label)

        xTest = labelNewArray[3343:, 1:256]
        actual_label = labelNewArray[3343: , 257]

        p = clf.predict(xTest)

        count = 0

        for i in range(0, 3343):
            if p[i] == actual_label[i]:
                count +=1
            else:
                count = 0

        print("Accuracy="+str((count/3343)*100))